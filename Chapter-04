
# Inject istio sidecar.
# Inject istio side card to namespace.
# Inject istio side card to application.
Note: ServiceMesh does not automatically inject the sidevar into everypod. you must specify which pods or applications must be managed by serviceMesh. for this add additional annotations on the deployment.

# Create gataway (Ingress url, access point or gateway to access your application. Example below)
# Create virtualservice (Pointing to SVC, Port to access your application | rule based access, like end-user: redhatter -> pointion to svc/v2, and all other users pointing to svc/v1. Example below)
# Create Destination Rules (Create a rules for traffic reroute, "Round_Robing" or "Random" or "Weighted" or "Least Request" based on the application version label match)

...

sidecar.istio.io/inject=true

...

Deployment:
...
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: history
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: history
          image: quay.io/redhattraining/ossm-history:1.0
...


Envoy Sidecar are 2 types.
- Ingress side card
- Egress side card

$ oc get deployment -n istio-system
  - istio-ingressgateway
  - istio-ingressgateway

$ oc get route -n istio-system
  you will find ingress gateway 


........................................ Start-01 ................................................

1) Create a new project
$ oc new-project hello
$ oc describe ns hello

2) Add ns to smmr 
$ oc get smmr (0/0)
$ oc edit smmr -n istio-system
spec:
  members:
  - hello

$ oc get smmr (1/1)
$ oc describe smmr -n istio-system
$ oc describe ns hello

3) Deploy the application (Deployment and service | apply the below yaml file)
4) Add istio side card to your deployment.

...
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: history
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
...

5) Create the gateway 
$ oc get gataway

$ oc get route -n istio-system

...
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: hello-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"   #<<---- '*' it will  create dynamic name. else 'hello.apps.ocp4.example.com'
...

6) Create VirtualService (Virtual service is for map SVC, PORT and multiple PATH)
$ oc get  virtualservic
 
NAME       GATEWAYS            HOSTS   AGE
hello-vs   ["hello-gateway"]   ["*"]   18h

...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: hello-vs
spec:
  hosts:
  - "*"
  gateways:
  - hello-gateway
  http:
  - route:
    - destination:
        host: hello   #<--- oc get svc 'name'
        port:
          name: http-8080 #<--- oc edi svc 'ports name'
          number: 8080    #<--- oc edi svc 'ports port'
...

7) Access the application
$ oc get route -n istio-system
$ curl -v http://hello-hello-gateway-525eca1d5089dbdc-istio-system.apps.ocp4.example.com
$ curl -v http://istio-ingressgateway-istio-system.apps.ocp4.example.com

8) Find the trafic flow from kiali.



Example: Yaml 

$ oc patch servicemeshmemberroll/default -n istio-system --type=merge -p '{"spec": {"members": ["hello"]}}'

$ deployment.yaml 
...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello
spec:
  selector:
    matchLabels:
      app: hello
  replicas: 1
  template:
    metadata:
      labels:
        app: hello
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: hello
          image: quay.io/redhattraining/ossm-maven-simplest:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: hello
  name: hello
spec:
  ports:
    - name: http-8080
      port: 8080
      targetPort: 8080
  selector:
    app: hello
...
................................... end-01 .....................................


- 




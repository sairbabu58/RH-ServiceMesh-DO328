- ServiceMesh Canary deployment (v1 70%, v2 30% | v1 30%, v2 70% | v1 0%, v2 100%)
- Create a NS and add to SMMR
- Create deployment v1, v2, v3 (stage by stage | add the istio annotation)
- Create service
- Create gateway
- Create virtualservice
- Create destinationrule
- Access and validate the application from kiali
...
- Mirror Launchs or Dark Launches(traffic mirroring)
- Mirror the application 100% to v2 application
- Mirror the application 10% to v2 application
- Release the v2 application
- Everything is configured on VirtualService
- Validate the traffic route details from Grafana dashboard

troubleshoot:
- Check the service tab from kiali
- Check all the app having istio enjection or not


- From Kiali App adjust the weight > service > select service > adjust the weight

................................... Start Canary Deployment  .................................
1) Create and apply v-1 application.
...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vertx-greet-v1
spec:
  selector:
    matchLabels:
      app: vertx-greet
  replicas: 1
  template:
    metadata:
      labels:
        app: vertx-greet
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: vertx-greet
          image: quay.io/redhattraining/ossm-vertx-greet:1.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
...
2- Create and apply service for v1 application
...
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vertx-greet
  name: vertx-greet
spec:
  ports:
    - name: http
      port: 8080
  selector:
    app: vertx-greet
...
3- Create and apply gateway 
...
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: vertx-greet-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
...
4. Apply virtual service 
...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vertx-greet
spec:
  hosts:
  - "*"
  gateways:
  - vertx-greet-gateway
  http:
  - route:
    - destination:
        host: vertx-greet
        port:
          number: 8080
...
5- Access the application
$ oc get route -n istio-system (if it is not work, please apply the destinationrule)

hello world


...
7- Create and apply v2 application
...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vertx-greet-v2
spec:
  selector:
    matchLabels:
      app: vertx-greet
  replicas: 1
  template:
    metadata:
      labels:
        app: vertx-greet
        version: v2
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: vertx-greet
          image: quay.io/redhattraining/ossm-vertx-greet:1.0
          ports:
            - containerPort: 8080
          env:
          - name: GREETING
            value: "Hello Red Hat!"
...
8- $ oc get ep (v1 and v2 pods ip addr)
...
9- Create a destinationrule
...
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: vertx-greet
spec:
  host: vertx-greet
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
...

10- Update the virtualservice configuration file
...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vertx-greet
spec:
  hosts:
  - "*"
  gateways:
  - vertx-greet-gateway
  http:
  - route:
    - destination:
        host: vertx-greet
        subset: v1
        port:
          number: 8080
      weight: 80
    - destination:
        host: vertx-greet
        subset: v2
        port:
          number: 8080
      weight: 20
...
11- Monitor the graph from Kiali dashboard
...
13- (optional) Create a v3 application
...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vertx-greet-v3
spec:
  selector:
    matchLabels:
      app: vertx-greet
  replicas: 1
  template:
    metadata:
      labels:
        app: vertx-greet
        version: v3
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: vertx-greet
          image: quay.io/redhattraining/ossm-vertx-greet:1.0
          ports:
            - containerPort: 8080
          env:
          - name: GREETING
            value: "Hello v3!"
          - name: MAX_REQUESTS_PER_SECOND
            value: "1"
...
14- Add the v3 details on destinationrule
...
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: vertx-greet
spec:
  host: vertx-greet
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
  - name: v3
    labels:
      version: v3
...
15- Add the v3 details on virtualservice
...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vertx-greet
spec:
  hosts:
  - "*"
  gateways:
  - vertx-greet-gateway
  http:
  - route:
    - destination:
        host: vertx-greet
        subset: v1
        port:
          number: 8080
      weight: 10
    - destination:
        host: vertx-greet
        subset: v2
        port:
          number: 8080
      weight: 45
    - destination:
        host: vertx-greet
        subset: v3
        port:
          number: 8080
      weight: 45
...
16- Curl the application
17- Moniter the app details from Kiali dashboard.


...............................  End Canary Deplotment ................................



............................... Start Mirror Luncher ....................................

1) Create a new project
2) Add project to SMMR
3) Deploy the v1 application, svc, gateway, dr, vs
...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vertx-greet-v1
spec:
  selector:
    matchLabels:
      app: vertx-greet
      version: v1
  replicas: 1
  template:
    metadata:
      labels:
        app: vertx-greet
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: vertx-greet
          image: quay.io/redhattraining/ossm-vertx-greet:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vertx-greet
  name: vertx-greet
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: vertx-greet
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: vertx-greet-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vertx-greet
  labels:
    kiali_wizard: weighted_routing
spec:
  hosts:
  - "*"
  gateways:
  - vertx-greet-gateway
  http:
  - route:
    - destination:
        host: vertx-greet
        subset: v1
        port:
          number: 8080
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: vertx-greet
  labels:
    kiali_wizard: weighted_routing
spec:
  host: vertx-greet
  subsets:
  - name: v1
    labels:
      version: v1
...
4-  Access the application every 0.5 seconds
 $ GATEWAY_URL=$(oc get route istio-ingressgateway -n istio-system -o jsonpath='{.spec.host}')
 $ watch -p -n0.5 curl -s $GATEWAY_URL

5- Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V1 Application name
 Output ref: 2 OPS  | 100%

6- Deploy the v2 applicarion 

...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vertx-greet-v2
spec:
  selector:
    matchLabels:
      app: vertx-greet
      version: v2
  replicas: 1
  template:
    metadata:
      labels:
        app: vertx-greet
        version: v2
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
        - name: vertx-greet
          image: quay.io/redhattraining/ossm-vertx-greet:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
          - name: GREETING
            value: "Hola Mundo!"
...
7- Add v2 application label on DR 

...
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: vertx-greet
  labels:
    kiali_wizard: weighted_routing
spec:
  host: vertx-greet
  subsets:
  - labels:
      version: v1
    name: v1
  - labels:
      version: v2
    name: v2
...

8- Mirror the v1 traffic to v2 100%

...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vertx-greet
  labels:
    kiali_wizard: weighted_routing
spec:
  hosts:
  - "*"
  gateways:
  - vertx-greet-gateway
  http:
  - route:
    - destination:
        host: vertx-greet
        subset: v1
        port:
          number: 8080
    mirror:
      host: vertx-greet
      subset: v2
...

9- Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V1 Application name
 Output ref: 2 OPS  | 100%

  Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V2 Application name
 Output ref: 2 OPS  | 100%
...

10- Mirror only 10% traffice 

...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: vertx-greet
  labels:
    kiali_wizard: weighted_routing
spec:
  hosts:
  - "*"
  gateways:
  - vertx-greet-gateway
  http:
  - mirror:
      host: vertx-greet
      subset: v2
    mirror_percent: 10
    route:
    - destination:
        host: vertx-greet
        subset: v1
        port:
          number: 8080
...

11- Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V1 Application name
 Output ref: 2 OPS  | 100%

  Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V2 Application name
 Output ref: 0.20 OPS  | 100%
...

12- Finally reroute all the traffic to v2 application

...
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  generation: 4
  labels:
    kiali_wizard: weighted_routing
  name: vertx-greet
  namespace: release-dark
spec:
  gateways:
  - vertx-greet-gateway
  hosts:
  - '*'
  http:
  - route:
    - destination:
        host: vertx-greet
        port:
          number: 8080
        subset: v2
...
13- Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V1 Application name
 Output ref: 0 OPS  | 100%

  Monitor the traffic from Grafana dashboard
  -> oc get rouute -n istio-system -> URL over Browser -> Dashboard -> Manage -> Istio -> Istio Workload Dashboard -> Namespace: your-NS -> Workload: V2 Application name
 Output ref: 2 OPS  | 100%
...

